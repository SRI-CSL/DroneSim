load load-maude
load sitl

load model-checker 
load ~/Repositories/imaude/ilib/load-lib
load ../../Lib/meta-cp-e 

mod TEST is
 inc META-CP-E-AGENT .


ops es0 es1 es2 es3 es4 : -> ESet .
eq es0 = initAgentEset(mt,'maude,'g2d,'g2d,'plambda,'SITL,'asys2,'Drone) .


ops aconfT0 aconfT1 aconfT2 : -> Term .


eq aconfT0 = tvalTerm(getVal(es0,
                      'tval,'agentConf,tm('SOFT-AGENTS,'`{_`}['none.Conf]))) .

eq aconfT1 =  applyXXRules(['SITL], aconfT0,'doTask) .
eq es1 = addEntry(es0,'tval,'agentConf,tm('SITL,aconfT1)) .
eq es2 = doActs(es1) .

**** req('rewTilDone, ql('doTask), req('doActs, ql(nil), nil))
***(
 if tm(amodname,aconfT) := 
      getVal(es,'tval,'agentConf,tm('SOFT-AGENTS,'`{_`}['none.Conf]))
 /\ aconfT' := applyXXRules([amodname], aconfT,toks)
 /\ es' := addEntry(es,'tval,'agentConf,tm(amodname,aconfT'))
      
 
 if es' := doActs(es)
 /\ tm(amodname,mteT) := getVal(es','tval 'mte,tm('NAT,'0.Zero))
 /\  reqQ1 := req('odActs,ql(toks),reqQ')
 /\  reqQ0 := (if hasSort([amodname],mteT,'NzTime)
              then req('doUnitActs,ql(toks),reqQ1)
              else reqQ'
              fi)  .      



  if tm(amodname,nztT) := 
       getVal(es,'tval,'nzt,tm('SOFT-AGENTS,'infty.TimeInf))
  /\ reqQ0 :=
       (if hasSort([amodname],nztT,'NzTime)
       then genUnitActReqs(es,reqQ')
       else reqQ'
       fi) .
) 

endm

***(

red getVal(es2,'tval,'nzt,tm('SOFT-AGENTS,'infty.TimeInf)) .

red hasSort(['SITL],'s_['0.Zero],'NzTime) .

red genUnitActReqs(es2,nil) .


)