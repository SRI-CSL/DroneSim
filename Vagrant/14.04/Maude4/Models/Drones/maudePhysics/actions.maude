fmod MODEL-ACTIONS is
  inc MODEL-TASKS .

  vars t t' t0 t1 t2 : Time .
  var nzt : NzTime .
  vars id id' id0 : Id .
  vars l0 l1 l2 l3 loc home : Loc .
  vars lkb ekb ekb' ekb0 kb' : KB .
  var dir : Dir .
  var b b0 b1 b2 : Bool .
  var evs : EventSet .
  vars e e0 v : FiniteFloat .
	var n u alt : Nat .
  var act : Action .
  vars x0 y0 z0 : Int .

  var alt1 : Rat .
  vars ffx ffy ffz ffx1 ffy1 ffz1 ffx0 ffy0 ffz0 ffa  : FiniteFloat .
  vars dx dy dz d dv dt sp dur : FiniteFloat .
        
  
***** Get rid of timeEffectA  
eq timeEffectA(act,t) = none .  ---- controller deals with this.
  

**** implicit that id =/= id' since shouldn't be two class facts for id
**** using same t means locs are refreshed at each time step
 eq okEnv(class(id,Bot)  (atloc(id, l1) @ t) 
                 class(id',Bot) (atloc(id',l1) @ t) ekb) = false .
 eq okEnv(ekb) = true [owise] .


**** incase there is only one bot l3 should be l2, no occupation conflict
**** performs actions for one-time unit -- but SEQUENTIALLY!! see below
****  op doUnitEnvAct : Time KB EventSet -> KB .

 ceq doUnitEnvAct(t, ekb, _@_;_(mv(id, dir, v), 0, nzt) evs)
**** (mv(id,dir,v) @ 0 ; nzt) 
   = doUnitEnvAct(t, addK(ekb,(atloc(id,l3) @ s(t)) 
                              energy(id,e0) @ s(t)) , evs)
   if l0 := getLoc(id,ekb)
   /\ l1 := doMv(l0,dir,v) 
   /\ e := getEnergy(id,ekb)
   /\ e0 := max(e - costMv(v),0.0)
   /\ l2 := windEffect(l1,ekb) 
   /\ l3 := 
      (if occupied(l1,ekb) then l0 else (if occupied(l2,ekb) then l1 else l2 fi) fi)
  .

 ceq doUnitEnvAct(t, ekb, _@_;_(charge(id), 0, nzt) evs)
   = doUnitEnvAct(t,
      addK(ekb,energy(id,min(e + chargeUnit,maxCharge)) @ s t), evs)
   if (energy(id,e) @ t0) (atloc(id,l0) @ t1) 
	    (atloc(id0,l1) @ t2) class(id0,Station) ekb0 := ekb
   /\ equiv(l0,l1)
	   .

  eq doUnitEnvAct(t, ekb, evs) = ekb [owise] .

  op wind : Loc Dir Nat -> Info .
  op wind : Dir Nat -> Info .
  op windEffect : Loc KB -> Loc .
  eq windEffect(l0, (clock(t)) (wind(l0,dir,n) @ t0) ekb) =
         (if t rem n == 0 then doMv(l0,dir,gridStepX) else l0 fi) .
  ceq windEffect(l0, (clock(t)) (wind(dir,n) @ t0) ekb) = doMv(l0,dir,gridStepX)
   if t rem n == 0 .
  eq windEffect(l0,ekb) = l0 [owise] .
 
	
***(
--- modified location by wind
 ceq windEffect(l0, (clock(t)) ekb) = doMv(l0,S)
  if t rem 13 == 0 .
 ceq windEffect(l0, (clock(t)) ekb) = doMv(l0,N)
  if t rem 17 == 0 .
)


***(
Alisson's logs show .25 / sec early, then .125 /sec later 
battery drain.

Assume .5 for taking off  
       .25 for landing
       .25 for horizontal flight
       .125 for hovering
)

 **** for 1 sec     
 op costMv : FiniteFloat -> FiniteFloat .

 op costMvZ : FiniteFloat FiniteFloat ->  FiniteFloat .


************ sitl like unit actions
**** goToW(id,ffx1 * sp,ffy1 * sp,ffz1 * sp, ffx,ffy,ffz,dur)

  ceq doUnitEnvAct(t, ekb, 
     (goToW(id,ffx1,ffy1,ffz1, ffx,ffy,ffz,dur) @ 0 ) evs)
   = doUnitEnvAct(t, addK(ekb,(atloc(id,l3) @ s(t)) 
                              energy(id,e0) @ s(t)) kb', evs)
  if l0 := getLoc(id,ekb)
  /\ pt(x0,y0,z0) := l0
  /\ dx := ffx1 + ffx
  /\ dy := ffy1 + ffy
  /\ dz := ffz1 + ffz
  /\ sp := sqrt((ffx1 * ffx1) + (ffy1 * ffy1) + (ffz1 * ffz1))
  /\ l1 := pt(x0 + round(dx / gridStepX),
              y0 + round(dy / gridStepY),
              z0 + round(dz / gridStepZ))
  /\ e := getEnergy(id,ekb)
  /\ e0 := energyGoToW(e,sp)
  /\ l3 := (if occupied(l1,ekb) then l0 else l1 fi)
  /\ kb' := if e0 > 0.0 then none else (crashed(id,l3,float(t)) @ s(t)) fi
  .

**** costMv horizontal motion as sp for 1 unit
  op energyGoToW : FiniteFloat FiniteFloat  -> FiniteFloat .
  eq energyGoToW(e,v) = max(e - costMv(v),0.0) .  

***(
  op doMvU : Loc Dir FiniteFloat -> Loc .
  ceq doMvU(l0,dir(ffx,ffy,ffz),v) =
    (if (d < v )
  	then addLoc(l0,dir(ffx,ffy,ffz))
  	else addLoc(l0, dir(dx,dy,dz))
    fi)
  if d := sqrt((ffx * ffx) + (ffy * ffy) + (ffz * ffz))     
  /\ dv := (v / d)     ---- d/v secs to complete v/d portion per sec
  /\ dx := dv * ffx
  /\ dy := dv * ffy
  /\ dz := dv * ffz
  .

  op addLoc : Loc Dir -> Loc .
  ceq addLoc(l0,dir(ffx,ffy,ffz)) =  {senl1,msen2grid(senl1)}
  if senLoc(ffx0,ffy0,ffz0) := getSenLoc(l0)
  /\ senl1 := senLoc(ffx0 + ffx,ffy0 + ffy, ffz0 + ffz) .
)

 ceq doUnitEnvAct(t, ekb, (takeOff(id,alt) @ 0 ) evs)
   = doUnitEnvAct(t, addK(ekb,(atloc(id,l1) @ s(t)) 
                              energy(id,e0) @ s(t)) , evs)
 if pt(x0,y0,z0) := getLoc(id,ekb)
 /\ dz := takeOffInc(float(z0) * gridStepZ,float(alt),vlift)
 /\ l1 := pt(x0,y0,z0 + round(dz / gridStepZ))
 /\ e := getEnergy(id,ekb)
 /\ e0 := energyTakeOffU(e,vlift,dz / vlift)
  .

 op takeOffInc : FiniteFloat FiniteFloat FiniteFloat -> FiniteFloat .
 eq takeOffInc(ffz0,ffa,v) = 
    (if ffa - ffz0 > v  then v else ffa - ffz0 fi) .

 op energyTakeOffU : FiniteFloat FiniteFloat FiniteFloat -> FiniteFloat .
 eq energyTakeOffU(e,v,dt) = max(e - costMvZ(v,dt),0.0) .  
 
 **** cost of vertical move at speed v for dt.

 ceq doUnitEnvAct(t, ekb, (land(id) @ 0 ) evs)
   = doUnitEnvAct(t, addK(ekb,kb' (atloc(id,l1) @ s(t)) 
                              energy(id,e0) @ s(t)) , evs)
 if pt(x0,y0,z0) := getLoc(id,ekb)
 /\ home := getHome(id,ekb)
 /\ dz := landInc(float(z0) * gridStepZ,0.0,vland)
 /\ l1 := pt(x0,y0,z0 - round(dz * gridStepZ))
 /\ e := getEnergy(id,ekb)
 /\ e0 := energyLandU(e,vland, dz / vland)
 /\ kb' := if near(pt(x0,y0,0),home) then none
           else (landFarFromHome(id,pt(x0,y0,0),float(t)) @ s(t)) fi
  .

  op landInc : FiniteFloat FiniteFloat FiniteFloat -> FiniteFloat .
  eq landInc(ffz0,ffa,v) = 
           (if ffz0 - ffa > v  then v else ffz0 - ffa fi) .

 op energyLandU : FiniteFloat FiniteFloat FiniteFloat -> FiniteFloat .
 eq energyLandU(e,v,dt) = max(e - costMvZ(- v,dt),0.0) .  

***( 
 alt = 2  v = 3  alt - v neg so subtract alt
 alt = 2 v = 1    substract v
)

  op energyLandU : FiniteFloat FiniteFloat  -> FiniteFloat .
  eq energyLandU(e,v) = max(e - costMv(v),0.0) .  ---!!!fix

  op doLandU : Loc Nat -> Loc .
  ceq doLandU(pt(x0,y0,z0),alt) = l1
  if ffz0 := float(z0) * gridStepZ 
  /\ ffz := (if float(alt) <= vlift 
            then ffz0 - float(alt) 
            else ffz0 - vlift fi)
  /\ l1 := pt(x0,y0,round(ffz / gridStepZ)) .


endfm

