Agent Actions -- 

takeOff(id,alt)
land(id)
goToW(id,loc,sp)
stop(id)
continue(id)

***(
controller  maps
 takeOff(id,alt) >>  takeOff(id,alt)
 land(id) >> land(id)
 stop(id) >> none?
 
 goToW(id,loc,sp) >> goToW(id,vx,vy,vz,wx,wy,wz,dur) -- adding wind vector
 
 continue(id) >>
   pending(goToW(id,loc,sp))  recompute as above
   pending(takeOff(id,alt))   if maudePhysics then takeOff(id,alt) else continue(id)
   pending(land(id))   if maudePhysics then land(id) else continue(id)
)

How does maude implement goToW(id,vx,vy,vz,wx,wy,wz,dur)
   desired speed is length of (vx,vy,vz)

 (a) forgetting acceleration
     newloc = curloc + (vx+wx, vy+wy, vz+wz)
     newspeed = len(vx+wx, vy+wy, vz+wz)

 (b) accounting for acceleration 
     cur speed sp0, acc a
     (vx,vy,vz) = (dx,dy,dz) * sp  -- unit vector * speed
     if spo >=  sp
        newloc =  curloc + (vx+wx, vy+wy, vz+wz)
        newspeed = sp0
    ow newloc = curloc + (dx,dy,dz) * min(sp,sp0 + a/2) + w -- 
       new speed = min(sp, sp0+a)
       
    
If landing decrement z until 0ish
If takeOff increment z until reach altitude        
     
%%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    
two drones w sitl

  Gets close, but not close enough -- goes in  a circle
  Over shoots correction


strategy 1 -- constant speed -- does maude circle?

strategy 2 slow down
need to slow down when get close
Maude physics -- (v0 + v1) / 2  if close  --- controller job

strategy 3 get close and issue goto

THESE ARE CONTROLLER STRATEGIES, RIGHT?

Need envkb to 
 have real locs
 local kb grid locs?
env kb needs model actual velocity



%%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    

What if pending action is stop?
notDone(stop(id), loc) = false
actBasic will attempt a nextLoc 
Not good,  maybe
       else (if pact == land(id) --- if landing, then stop
        then {stop(id), addK(pending(id,stop(id)) @ s t,kb)}
>>>
       else (if pact == land(id) or pact == stop(id) --- if landing, then stop
        then {stop(id), addK(pending(id,stop(id)) @ s t,kb)}


%%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    

Wind models

1. uniform over area of interest: dir, speed  (thresh for application?)

2. uniform with gusts: add speed of gust, probablility

3. localized wind:  blows only in some strip or sector

4. varies with time of day:

Windmodel : Params KB -> wind vector

----------------------------------------------
Energy model

 parameters: load factor, battery type, vehicle type

EnergyModel: Params, KB (battery level, velocity, acceleration) -> new battery level

----------------------------------------------
Fault models

  GPS error/failure
  Heading/velocity error
  Battery drain

----------------------------------------------
Assumptions  
 moving up/down v dt -- 
    newloc = computed loc +/- err0
    energy used = energy computed +/- err1
 similarly for traveling at velocity v     
 
     
%%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%% 
SCP issues

Drones / maudePhysics
  eq val-pics(id,kb,act) 
   = {benefit(id,kb,act),cost(id,kb,act)} .

two-drones
  eq val-pics(id,kb,act) 
   = {benefit2(id,kb,act),cost(id,kb,act)} .

Currently SCP only invoked when current goal met.
+    else (if notDone(pact,loc) then {continue(id),kb} ---- clt added

Need a way to check progress vs new goal.


%%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%% 
%%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%% 

documenting assumptions/conventions

vel(v)  -- the measured velocity --- retrieved by getCurVel(id,kb)
targetVel(v)  -- the intended velocity --- retrieved by getVel(id,kb)

points pt(x,y,z) are in integral grid units
gridStep<X,Y,Z>  is the physical measure -- in meters

sen<X,Y,Z>Low ---- what does this model?  Is it a coordinate translation
   between SITL and Maude?  

costMv(v) is intended to be the cost for horizontal flight at speed v for 1 sec (1 time unit)

the equation cost2loc(l0,l1,v) = distanceFF(l0,l1) * costMv(v) 
seems inconsistant with the above, maybe

  cost2loc(l0,l1,v) = timeToLoc(l0,l1,v) * costMv(v) 

where timeToLoc = (distanceFF(l0,l1) / v)


costMvZ(v,dt) -- is the cost of vertial motion at speed v for time dt
--- is declared in actions.maude -- probably should be in knowledge?

Question -- these are used for the maude Physics,  do we want
the same ones to be used in reasoning about what action to take?


!!!!
gridStep   means steps per meter not meters per step
according to getNormVec


%%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%% 
Fixed paths to use ~/ rather than /home/...
Fixed meta-cp-e so agentEsetInit can specify number of sim rounds for stats round.   Default is 1000

In -clt versions replaced

op countVisit : Id Loc Nat -> Info .

by

**** track visitTimes, the rest can be computed
  op visitTimes : Id Loc NatList -> Info .  -- list initially nil


     
%%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%% 
Spatial Coordination 

Consider invariant dist(b0,b1) > n meters.
When b0 (or b1) evaluates an action the preference should be minimal
if the resulting state (could) violate the invariant.
We assume b0 knows the location l1 of b1 at t1 and knows the max speed s1 of b1.
So at t (current time) + 1 b0 should avoid a circle centered at l1 of radius 
(t - t0 + 1) * s1.  
If b0 plans to goTo l2 from l0 in time dt then the path from l0 to l2
should not intersect a circle at l1 of radius (t - t0 + dt) * s1. 

%%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%% 
16dec26  
maudePhysics/runs16dec24-clt.txt, runs-sum16dec24-clt.txt  
contains resulsts of some experiments looking for circling in maudePhysics.
runs16dec24-clt.txt -- the end state unedited
runs-sum16dec24-clt.txt -- visitTimes, eLoc, track info only

I looked at wind 0, Rand.25 Rand.375, Rand.5

New configs for testing 
asys3 -- adds eLoc info  to the lkb -- the expected times to reach a loc.
  
asys3a -- add tracking -- the times near but not at a target loc
  no osciallation at any wind just some struggleing.
  
asys3b asys3a with vel 10  --- serious oscillation with no wind
asys3b asys3a with  vel 7.5 --- still some oscillation with no wind

Also, 

* Made a copy, scenario-clt.maude of scenario to avoid surprises.

* Fixed bug in actBasic, nextLocSCP (in tasks-wind-clt.maude)
-- scp was choosing the current point to revisit, so I call solveSCP with
the loc just visited removed from the possible actions.  

* Fixed another missing [owise] (updateRks in scp-clt.maude).
 
* Need to look at < on FF in FFVAL -- there is a potential divide by 0.0.
I think the definition of isZero is quite consistent with < .
Need to rethink scp and updateRks.

%%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%% 
I tweaked the controller in tasks-wind-clt.maude for the case
of continuing a GoToW.  The speed is reduces by half if near the target,
and no wind or a head wind. Otherwise speed is left alone.

Adjusting speed seems to help for velocities 7.5 and 10.0.

At velocity 5.0 there is no cycling, the drones eventually succeed even
with wind, just may have delay.

With no speed adjustment, at velocity 7.5 b(0) seems to be still ok, 
no oscillation, but b(1) oscillates around  pt(10, -30, 10): 
{66,pt(8, -28, 10)} ; {67,pt(13, -34, 10)} ....

At velocity 10, b(0) oscillates around pt(-40, 5, 5): {20,pt(-38, 11, 5)} ; {21,pt(-42, 1, 5)}  ... and b(1) oscillates around pt(40, -10, 10):
{6,pt(42, -12, 10)} ; {7, pt(34, -5, 10)} ...   
(the odd times don't show in the track because they are not `near').

With adjustment, neither drone oscillates at v 7.5 or v 10.0.    
See end of runs-sum16dec24-clt.txt or runs16dec24-clt.txt

I suspect some of the effects are due to the grid approximation of
location.  Maybe the maude environment kb should keep locations
in FiniteFloat coordinates?
