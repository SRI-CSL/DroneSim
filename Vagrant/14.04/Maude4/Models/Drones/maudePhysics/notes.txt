Agent Actions -- 

takeOff(id,alt)
land(id)
goToW(id,loc,sp)
stop(id)
continue(id)

***(
controller  maps
 takeOff(id,alt) >>  takeOff(id,alt)
 land(id) >> land(id)
 stop(id) >> none?
 
 goToW(id,loc,sp) >> goToW(id,vx,vy,vz,wx,wy,wz,dur) -- adding wind vector
 
 continue(id) >>
   pending(goToW(id,loc,sp))  recompute as above
   pending(takeOff(id,alt))   if maudePhysics then takeOff(id,alt) else continue(id)
   pending(land(id))   if maudePhysics then land(id) else continue(id)
)

How does maude implement goToW(id,vx,vy,vz,wx,wy,wz,dur)
   desired speed is length of (vx,vy,vz)

 (a) forgetting acceleration
     newloc = curloc + (vx+wx, vy+wy, vz+wz)
     newspeed = len(vx+wx, vy+wy, vz+wz)

 (b) accounting for acceleration 
     cur speed sp0, acc a
     (vx,vy,vz) = (dx,dy,dz) * sp  -- unit vector * speed
     if spo >=  sp
        newloc =  curloc + (vx+wx, vy+wy, vz+wz)
        newspeed = sp0
    ow newloc = curloc + (dx,dy,dz) * min(sp,sp0 + a/2) + w -- 
       new speed = min(sp, sp0+a)
       
    
If landing decrement z until 0ish
If takeOff increment z until reach altitude        
     
     
%%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    

Wind models

1. uniform over area of interest: dir, speed  (thresh for application?)

2. uniform with gusts: add speed of gust, probablility

3. localized wind:  blows only in some strip or sector

4. varies with time of day:

Windmodel : Params KB -> wind vector

----------------------------------------------
Energy model

 parameters: load factor, battery type, vehicle type

EnergyModel: Params, KB (battery level, velocity, acceleration) -> new battery level

----------------------------------------------
Fault models

  GPS error/failure
  Heading/velocity error
  Battery drain

----------------------------------------------
Assumptions  
 moving up/down v dt -- 
    newloc = computed loc +/- err0
    energy used = energy computed +/- err1
 similarly for traveling at velocity v     
 
     
%%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%% 

documenting assumptions/conventions

vel(v)  -- the measured velocity --- retrieved by getCurVel(id,kb)
targetVel(v)  -- the intended velocity --- retrieved by getVel(id,kb)

points pt(x,y,z) are in integral grid units
gridStep<X,Y,Z>  is the physical measure -- in meters

sen<X,Y,Z>Low ---- what does this model?  Is it a coordinate translation
   between SITL and Maude?  

costMv(v) is intended to be the cost for horizontal flight at speed v for 1 sec (1 time unit)

the equation cost2loc(l0,l1,v) = distanceFF(l0,l1) * costMv(v) 
seems inconsistant with the above, maybe

  cost2loc(l0,l1,v) = timeToLoc(l0,l1,v) * costMv(v) 

where timeToLoc = (distanceFF(l0,l1) / v)


costMvZ(v,dt) -- is the cost of vertial motion at speed v for time dt
--- is declared in actions.maude -- probably should be in knowledge?

Question -- these are used for the maude Physics,  do we want
the same ones to be used in reasoning about what action to take?


%%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%%    %%%%%%%%% 
replace 
 op countVisit : Id Loc Nat -> Info .
by

**** track visitTimes, the rest can be computed
  op visitTimes : Id Loc NatList -> Info .  -- list initially nil
