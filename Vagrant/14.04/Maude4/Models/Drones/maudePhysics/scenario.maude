mod SCENARIO is
  inc MODEL-ACTIONS  .
  inc SOFT-AGENT-RULES .
   inc PRETTY .
  --- inc SOLVE-SCP{valuation2valpatrolonly} . 
  --- inc SOLVE-SCP{valuation2valpatrolenergy} . 
	--- inc SOLVE-SCP{valuation2valpatrolenergyconservative} . 

vars n n' t t0 m t1 : Nat .
vars i j x y z x0 y0 z0 : Int .
vars sx sy sz dx dy dz v e c dt te : FiniteFloat .
var dir : Dir .
vars wkb kb lkb ekb : KB .
var aconf conf : Conf .
var attrs : AttributeSet .
var id eid : Id .
var ids : IdSet .
var cl : Class .
var l l0 home loc loc0 : Loc .
var a : Int .
var locs : LocList .

op bound : Nat -> ConfElt .

eq comDistance = 2 .

eq senXLow = 0.0 .
eq senYLow = 0.0 .
eq senZLow = 0.0 .

---- Grid size
eq gridStepX = 1.0 .
eq gridStepY = 1.0 .
eq gridStepZ = 1.0 .
 
eq chargeUnit = 5.0 .
eq maxCharge = 20.0 .

eq botDelay = 1 .
eq periodicity = 60 .

eq vlift = 5.0 .
eq vland = 5.0 .

***(
Performed one experiment with dronekit copter at velocity 5m/s
and altitude 5m

Takeoff : 100% -> 97%
70m  : 96% -> 91%
100m : 91% -> 85%
100m : 84% -> 78%
100m : 77% -> 71%
100m : 70% -> 65%
70m : 64% -> 59%
Landing/Disarm : 58% -> 55%

)

***(
Alisson's logs show .25 / sec early, then .125 /sec later 
battery drain.

Assume .5 for taking off  
       .25 for landing
       .25 for horizontal flight
       .125 for hovering
)

 **** for 1 sec     
***  op costMv : FiniteFloat -> FiniteFloat .
eq costMv(v) = (if v < 3.0 then .125 else .25 fi) .
**** eq costMv(v) = 0.06 . --- consumes x percent battery per meter


**** op costMvZ : FiniteFloat FiniteFloat ->  FiniteFloat .
 eq costMvZ(v,dt) = 
     if (v > 0.0) 
     then  dt * 0.5
     else  dt * 0.25
     fi .


**** ekb has current velocity vel
op mkBekb : Nat FiniteFloat FiniteFloat FiniteFloat FiniteFloat FiniteFloat 
             -> KB .
eq mkBekb(n,sx,sy,sz,v,e) = 
    (atloc(b(n),mkLoc(sx,sy,sz)) @ 0)
    class(b(n),Bot) (energy(b(n),e) @ 0) (vel(b(n),v) @ 0) .

**** lkb has target velocity 
op mkBkb : Nat FiniteFloat FiniteFloat FiniteFloat FiniteFloat FiniteFloat FiniteFloat Int LocList -> KB .
eq mkBkb(n,sx,sy,sz,v,e,c,a,locs) = 
    mkBekb(n,sx,sy,sz,v,e)  (targetVel(b(n),v) @ 0) 
    myAlt(b(n),a) (caution(b(n),c) @ 0)
    myHome(b(n),mkLoc(sx,sy,sz)) (targets(b(n),locs,nil) @ 0) 
***    (visited(b(n),nil) @ 0) 
    (lastVisit(b(n),mkLoc(sx,sy,sz),0.0) @ 0)
    (mkCountVisits(n,locs)) (countLate(b(n),0) @ 0)
     clock(0) .

op mkCountVisits : Nat LocList -> KB .
eq mkCountVisits(n,loc ; locs) 
 = (countVisit(b(n),loc,0) @ 0) mkCountVisits(n,locs) .
eq mkCountVisits(n,nil) = none .

op mkB : Nat FiniteFloat FiniteFloat FiniteFloat FiniteFloat FiniteFloat FiniteFloat Int LocList -> Agent .
eq mkB(n,sx,sy,sz,v,e,c,a,locs) =
 [b(n) : Bot | lkb : mkBkb(n,sx,sy,sz,v,e,c,a,locs),
               ckb : none, evs : (tick @ 0)] .
 
ops mkE1 : Nat FiniteFloat FiniteFloat FiniteFloat FiniteFloat FiniteFloat -> Env .  **** bot env
ops mkE2 : Nat FiniteFloat FiniteFloat FiniteFloat FiniteFloat FiniteFloat -> Env .  **** bot env
eq mkE1(n,sx,sy,sz,v,e) = [eI | clock(0) mkBekb(n,sx,sy,sz,v,e)] .

eq mkE2(n,sx,sy,sz,v,e) = 
      [eI | clock(0) (rand(0) @ 0) (wind(1.0,0.0,0.0) @ 0) (timeElapsed(0.0) @ 0)
            mkBekb(n,sx,sy,sz,v,e) 
            mkBekb(s n,sx + 10.0,sy + 10.0, sz,v,e)] .


ops locs1 locs2 locs1p : -> LocList .
eq locs1 = mkLoc(50.0,10.0,5.0) ; mkLoc(10.0,30.0,5.0)
           ; mkLoc(-20.0,50.0,5.0) ; mkLoc(-40.0,5.0,5.0) .

eq locs2 = mkLoc(40.0,-10.0,10.0) ; mkLoc(-40.0,-40.0,10.0)
           ; mkLoc(-35.0,-5.0,10.0) ; mkLoc(10.0,-30.0,10.0) .

--- energy parameter is not yet useful
ops conf1 conf2 conf3 conf4 : -> Conf .
****           (n,sx,sy,sz,  v,  e,   c,  a,locs) 
****          (n,sx, sy, sz, v,  e,    c,   a,locs)
eq conf1 = mkB(0,0.0,0.0,0.0,5.0,100.0,20.0,5,locs1)
           mkB(1,10.0,10.0,0.0,5.0,100.0,20.0,10,locs2)
           mkE2(0,0.0,0.0,0.0,5.0,100.0) . 

op asys1 : -> ASystem .
eq asys1 = { conf1 } .

eq windThresh = 2 * rand.25 .
--- eq windThresh = round(float(rand.25) / 2.0) .
--- eq windThresh = 0 .
eq stopSimulation = 5.0 .

--- eq act(id,kb) = actSimple(id,kb) .
--- eq act(id,kb) = actSCP(id,kb) .



ops asys asys2 : Nat -> ASystem .
eq asys(n) = { conf1 bound(n) } .

op upDateRand : ASystem Nat -> ASystem .
eq upDateRand({[ eI | ekb ] aconf}, n) =
              {[ eI | upDateRandKB(ekb,n)] aconf} .

op upDateRandKB  : KB Nat -> KB .
eq upDateRandKB(clock(t1) (rand(n') @ t) kb,n) = 
    clock(t1) (rand(n' + n) @ t1) kb .
eq upDateRandKB(kb,n) = kb [owise] .


***** CAVEAT -- this needs to be fixed if running w Sitl.
***** probably just want two versions of updateConf

op updateTE : KB FiniteFloat -> KB .
eq updateTE(clock(t1) (timeElapsed(te) @ t) kb, dt)
           = clock(t1) (timeElapsed(te + dt) @ t1) kb .
****
eq updateConf([ eI | ekb ] aconf) = 
    updateMaxSep(updateMinSep([ eI | updateTE(upDateRandKB(ekb,4),1.0) ] aconf)) .


op minSep : Nat Loc Loc -> ConfElt [ctor format(n t)] .
op maxSep : Nat Loc Loc -> ConfElt [ctor format(n t)] .


op updateMinSep : Conf -> Conf .
eq updateMinSep([ eI | ekb ] aconf minSep(n,l,l0)) =
                ([ eI | ekb ] aconf updateMinSep(n,l,l0,ekb)) .
eq updateMinSep(conf) = conf [owise] .


**** quick and dirty for 2 drone case
op updateMinSep : Nat Loc Loc KB -> ConfElt .
ceq updateMinSep(n,l,l0,(atloc(b(0),loc) @ t0) (atloc(b(1),loc0) @ t1) kb) = 
            (if n' < n 
            then minSep(n',loc,loc0)
            else minSep(n,l,l0)
            fi)
if n' := hdistance(loc,loc0) .

eq updateMinSep(n,l,l0,kb) = minSep(n,l,l0) [owise] .

op updateMaxSep : Conf -> Conf .
eq updateMaxSep([ eI | ekb ] aconf maxSep(n,l,l0)) =
                ([ eI | ekb ] aconf updateMaxSep(n,l,l0,ekb)) .
eq updateMaxSep(conf) = conf [owise] .


op updateMaxSep : Nat Loc Loc KB -> ConfElt .
ceq updateMaxSep(n,l,l0,(atloc(b(0),loc) @ t0) (atloc(b(1),loc0) @ t1) kb) = 
            (if n < n' 
            then maxSep(n',loc,loc0)
            else maxSep(n,l,l0)
            fi)
if n' := hdistance(loc,loc0) .

eq updateMaxSep(n,l,l0,kb) = maxSep(n,l,l0) [owise] .


op hdistance : Loc Loc -> Nat .
eq hdistance(pt(x,y,z),pt(x0,y0,z0)) = abs(x - x0) + abs(y - y0) .

op asys2 : -> ASystem .
eq asys2 = { conf1 minSep(20,pt(0,0,0),pt(10,10,0))
                   maxSep(20,pt(0,0,0),pt(10,10,0)) } .

***********  init configs with visit counting simplified
op mkBBkb : Nat FiniteFloat FiniteFloat FiniteFloat FiniteFloat FiniteFloat 
           FiniteFloat Int LocList -> KB .
eq mkBBkb(n,sx,sy,sz,v,e,c,a,locs) = 
    mkBekb(n,sx,sy,sz,v,e)  (targetVel(b(n),v) @ 0) 
    myAlt(b(n),a) (caution(b(n),c) @ 0)
    myHome(b(n),mkLoc(sx,sy,sz)) (targets(b(n),locs,nil) @ 0) 
    mkVisitTimes(n,locs) clock(0) .

op mkVisitTimes : Nat LocList -> KB .
eq mkVisitTimes(n,loc ; locs) 
 = (visitTimes(b(n),loc,nil) @ 0) mkVisitTimes(n,locs) .
eq mkVisitTimes(n,nil) = none .



op mkBB : Nat FiniteFloat FiniteFloat FiniteFloat FiniteFloat FiniteFloat FiniteFloat
          Int LocList -> Agent .
eq mkBB(n,sx,sy,sz,v,e,c,a,locs) =
 [b(n) : Bot | lkb : mkBBkb(n,sx,sy,sz,v,e,c,a,locs),
               ckb : none, evs : (tick @ 0)] .

op conf3 : -> Conf .
eq conf3 = mkBB(0,0.0,0.0,0.0,5.0,100.0,20.0,5,locs1)
           mkBB(1,10.0,10.0,0.0,5.0,100.0,20.0,10,locs2)
           mkE2(0,0.0,0.0,0.0,5.0,100.0) . 

op asys3 : -> ASystem .
eq asys3 = { conf3 minSep(20,pt(0,0,0),pt(10,10,0))
                   maxSep(20,pt(0,0,0),pt(10,10,0)) } .


endm


***(
May want to use higher speed or more energy usage
see runs files


)