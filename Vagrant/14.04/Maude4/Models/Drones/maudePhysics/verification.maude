load ../../../Lib/time
load ../../../Lib/soft-agents
load ../../../Lib/cp-e-config
load ../../../Lib/cp-e-rules
load ../../../Lib/pretty
load knowledge

fmod VERIFICATION is
  inc MODEL-KNOWLEDGE .

  vars conf conf1 : Conf .
  vars kb lkb ekb : KB .
  var times : TimesList .
  vars eid id : Id .
  var loc : Loc .
  var locs : LocList .
  var ff : FiniteFloat .
  var t : Nat .
  var cl : Class .
  var attrs : AttributeSet .
  var pact : Action .
  var pact? : ActSet .

  op allStopConf : Conf  -> Conf .

  op remStop : Conf -> Conf .
  eq remStop(allStopConf(conf)) = conf .
  eq remStop(conf) = conf [owise] .

  ops success softFail hardFail : ASystem LocList -> Bool .

  ceq success( { allStopConf(conf) }, locs ) = true 
   if ekb := envKB({ conf })
   /\ getCrashed(ekb) == none 
   /\ getLandedFarFromHome(ekb) == none
   --- /\ allStop(conf)
   /\ visitedAllTargets(locs,conf) .
  eq success( { conf }, locs ) = false [owise] . 

  ceq hardFail( { conf }, locs ) = true 
   if conf1 := remStop(conf)
   /\ ekb := envKB({ conf1 })
   /\ (not (getCrashed(ekb) == none))
      or (not (getLandedFarFromHome(ekb) == none)) .
  eq hardFail( { conf }, locs ) = false [owise] . 

  ceq softFail( { allStopConf(conf) }, locs ) = true 
   if not visitedAllTargets(locs,conf) .
  eq softFail( { conf }, locs ) = false [owise] . 
  
  op getCrashed : KB -> KB .
  eq getCrashed((crashed(id,loc,ff) @ t) kb) 
   = (crashed(id,loc,ff) @ t) getCrashed(kb) .
  eq getCrashed(kb) = none [owise] .

  op getLandedFarFromHome : KB -> KB .
  eq getLandedFarFromHome((landFarFromHome(id,loc,ff) @ t) kb)
   = (landFarFromHome(id,loc,ff) @ t) getLandedFarFromHome(kb) .
  eq getLandedFarFromHome(kb) = none [owise] .

  op visitedAllTargets : LocList Conf -> Bool .
  eq visitedAllTargets(locs, conf) 
   = visitedAllTargets$(locs,getVisited(conf)) .

  op visitedAllTargets$ : LocList KB -> Bool .
  ceq visitedAllTargets$(loc ; locs, (visitTimes(id,loc,times) @ t) kb) 
   = visitedAllTargets$(locs,kb) 
   if not (times == nil) .
  eq visitedAllTargets$(nil,kb) = true .
  eq visitedAllTargets$(locs,kb) = false [owise] .

  op getVisited : Conf -> KB .
  op getVisited$ : KB -> KB .
  eq getVisited([id : cl | lkb : lkb, attrs] conf) = 
   getVisited$(lkb) getVisited(conf) .
  eq getVisited(conf) = none [owise] .

  ceq getVisited$((visitTimes(id,loc,times) @ t) kb) = 
    (visitTimes(id,loc,times) @ t) getVisited$(kb) 
   if not (times == nil) .
  eq getVisited$(kb) = none [owise] .

  op allStop : Conf -> Bool .
  ceq allStop([id : cl | lkb : lkb, attrs] conf) = false
   if pact := getPending(id,lkb)
   /\ (not isStop(pact)) . 
  ceq allStop([id : cl | lkb : lkb, attrs] conf) = false
   if getPending(id,lkb) == none . 
  eq allStop(conf) = true [owise] .
            
endfm
