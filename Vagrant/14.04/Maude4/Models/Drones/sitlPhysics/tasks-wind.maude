fmod MODEL-TASKS is
  inc MODEL-KNOWLEDGE .
  inc RANDOM .
  --- inc SOLVE-SCP{valuation2valpicsenergyconservative} . 
  inc SOLVE-SCP{valuation2valvisit} . 
  
  vars id : Id .
  var cl : Class .
  vars  t t0 t1 t2 t3 t4 t5 t6 : Time .
  vars l l0 loc loc0 home locR loc1 loc2 : Loc .
  vars kb kbp lkb lkb0 lkb1 lkb2 lkb3 ekb ekb0 kb0 kb1 lkb4 : KB .
  vars evs evs' ievs devs : EventSet . 
  var dir dir1 : Dir .
  var act act0 act1  : Action .
  vars acts acts0 pact : ActSet .
  vars e v c x y z : FiniteFloat .
  vars sx sy sz sx0 sy0 sz0 sx1 sy1 sz1 sx2 sy2 sz2 sx3 sy3 sz3 : FiniteFloat .
  vars wsp sp sp0 ffx ffy ffz ffx1 ffy1 ffz1 dt dt2 dt1 ctheta : FiniteFloat .
  vars alt ix iy iz ix0 iy0 iz0 : Int .
  var r j n j1 thr : Nat .
  var wind? : Bool .
  
  vars locs locs0 locs1 locs2 locs3 : LocList .
  var times : TimesList .
 
  op sampleTime : -> FiniteFloat .
  eq sampleTime = 1.0 .

**** bot processes rcvs any other events are ignored
**** should not be any others
  op handleS : Class Id KB EventSet -> KB .
  eq handleS(cl,id,lkb,rcv(kb) ievs) =
        handleS(cl,id,addK(lkb,kb),ievs) .
  eq handleS(cl,id,lkb,ievs) = lkb [owise] .  

*** all local info
  op getSensors : Id KB -> KB .
  eq getSensors(id,ekb) = getWind(ekb)
     restrictKB(id,ekb) (getRand(id,ekb)) (getTimeElapsed(ekb)) .
  
**** keeps only location and energy, updates myDir at the edge
  op proSensors : Id KB KB -> KB .
  eq proSensors(id,lkb,ekb) = addK(lkb,ekb) .

***(controller  maps
 takeOff(id,alt) >> takeOff(id,alt)
 land(id) >> land(id)
 stop(id) >> none?
 
 goToW(id,loc,sp) >> goToW(id,vx,vy,vz,wx,wy,wz,dur) -- adding wind vector
 
 continue(id) >>
   pending(goToW(id,loc,sp))  recompute as above
   pending(takeOff(id,alt))   if maudePhysics then takeOff(id,alt) else continue(id)
   pending(land(id))   if maudePhysics then land(id) else continue(id)
)

**** Need to separate the unit vector and speed.
*** Controller level actions
op doControl : Action KB -> ActionKB .
ceq doControl(goToW(id,loc,sp),kb) 
 = {goToW(id,ffx1 * sp,ffy1 * sp,ffz1 * sp,ffx,ffy,ffz,2.0 * sampleTime),kb1} 
 if dir(ffx,ffy,ffz) := windEffect(kb)
 /\ dir(ffx1,ffy1,ffz1) := getNormVec(getLoc(id,kb),loc)
 /\ kb1 := updateELocKB(id,loc,sp,kb) 
  .

*** if near tgt then if no wind or head wind adjust speed
ceq doControl(continue(id), (pending(id,goToW(id,loc,sp)) @ t) kb) =
  {goToW(id,ffx1 * sp0,ffy1 * sp0,ffz1 * sp0,ffx,ffy,ffz,2.0 * sampleTime),
   (pending(id,goToW(id,loc,sp)) @ t) kb}
 if wind(sx,sy,sz,thr) @ t0 := getWind(kb)
 /\ dir(ffx,ffy,ffz) := windEffect(kb)    *** wdir * wsp
 /\ dir(ffx1,ffy1,ffz1) := getNormVec(getLoc(id,kb),loc) 
 /\ ctheta := (sx * ffx1) + (sy * ffy1)  + (sz * ffz1)
 /\ wind? :=  (ffx =/= 0.0) or (ffy =/= 0.0) or (ffz =/= 0.0)
 /\ sp0 := (if near(getLoc(id,kb),loc) 
           then adjustedSpeed(sp,wind?,ctheta)
           else sp
           fi) . 
 
 op adjustedSpeed : FiniteFloat Bool FiniteFloat -> FiniteFloat .
 
 eq adjustedSpeed(sp,wind?,ctheta) =
      (if wind? 
       then (if (ctheta > .5) 
             then sp / 2.0
             else sp fi)
        else sp / 2.0 fi) .
 
***(
 eq adjustedSpeed(sp,wind?,ctheta) =
      (if wind? 
       then (if (ctheta > .5) 
             then 2.0
             else sp fi)
        else 2.0 fi) .
)


eq doControl(continue(id), (pending(id,act) @ t) kb) 
          = {act,(pending(id,act) @ t) kb} [owise] .
eq doControl(act,kb) = {act,kb} [owise] .

op windEffect : KB -> Dir .
ceq windEffect((rand(r) @ t) (wind(ffx,ffy,ffz,thr) @ t1) kb) = 
  if j < thr 
  then dir(ffx * wsp, ffy * wsp, ffz * wsp)
  else dir(0.0,0.0,0.0) fi
 if j := random(r)
 /\ j1 := random(s r)
--- /\ wsp := (3.0 * float(j1) / float(randMax)) + 2.0 
 /\ wsp := (3.0 * float(j1) / float(randMax)) + 5.0 
--- /\ wsp := (3.0 * float(j1) / float(randMax)) + 20.0 
  .

*** bot reads mail, reads and processes sensors to get current lkb
*** then solves the botSCP restricted to available moves
****   op solveScp : Id KB ActSet -> ActSet .

  ceq doTask(cl,id,tick,ievs,devs,ekb,lkb) = 
{lkb4, devs (tick @ 1) (act1 @ 0),tell(id,act1,lkb3)} 
   if lkb0 := handleS(cl,id,lkb,ievs)
   /\ lkb1 := getSensors(id,ekb)
   /\ lkb2 := proSensors(id,lkb0,lkb1)
   /\ {act,lkb3} := act(id,lkb2) 
   /\ {act1,lkb4} := doControl(act,lkb3)
 .

sort ActionKB .
op `{_`,_`} : Action KB -> ActionKB .
op getAKBAct : ActionKB -> Action .
op getAKBKB : ActionKB -> KB .
eq  getAKBAct({act,kb}) = act .
eq  getAKBKB({act,kb}) = kb .


op act : Id KB -> ActionKB .
op actSimple : Id KB -> ActionKB .
op actSCP : Id KB -> ActionKB .

******** simplifying only gotos differ in strategy
op actBasic : Id KB -> ActionKB .
op nextLoc : Id KB -> ActionKB .
op nextLocSimple : Id KB -> ActionKB .
op nextLocSCP : Id KB -> ActionKB .

ceq actBasic(id,kb)  =
  (if pact == none   ***** haven't started
   then  {takeOff(id,alt), (pending(id,takeOff(id,alt)) @ s t) kb}
   else (if (e < stopSimulation and 
             not (pact == land(id) or pact == stop(id))) 
             --- Force to land whenever the energy is too low
     then {land(id), addK(pending(id,land(id)) @ s t,kb)}
       else (if notDone(pact,loc) 
         then {continue(id),kb} 
           else (if pact == land(id) or pact == stop(id) --- if landing, then stop
            then {stop(id), addK(pending(id,stop(id)) @ s t,kb)}
              else (if pact == goToW(id,home,v)
                then {land(id), addK(pending(id,land(id)) @ s t,kb)}
                 else (if e < c 
                  then {goToW(id,home,v), 
                       addK(pending(id,goToW(id,home,v)) @ s t,kb)}
                  else nextLoc(id,kb)
           fi ) fi) fi) fi) fi) fi) 
  if ((atloc(id,loc) @ t0) (energy(id,e) @ t1) clock(t)
      (caution(id,c) @ t4) myAlt(id,alt) myHome(id,home) 
      (targetVel(id,v) @ t2) kb0) := kb
 /\ pact := getPending(id,kb0) .
             

ceq nextLocSimple(id,kb) =
  (if locs == nil    
  then {goToW(id,first(locs0),v),
        addK((pending(id,goToW(id,first(locs0),v)) @ s t)
             (targets(id,rest(locs0), first(locs0)) @ s t),
            kb1)}
  else {goToW(id,first(locs),v), 
        addK((targets(id,rest(locs), locs0 ; first(locs)) @ s t) 
             (pending(id,goToW(id,first(locs),v)) @ s t),
               kb1)}
    fi )
  if  ((atloc(id,loc) @ t0) clock(t) (targetVel(id,v) @ t2) 
      (targets(id,locs,locs0) @ t3) 
       (timeElapsed(dt) @ t6) kb0 ) := kb
  /\  pact := getPending(id,kb0) 
  /\ kb1 := (if isGoTo(pact)
              then (if (close(getLoc(pact),loc) 
                        and not(recentVisitT(getLoc(pact),kb,dt)))
                  then incVisitTimes(id,getLoc(pact),t,kb)
                  else kb fi)
            else kb fi)  .


ceq nextLocSCP(id,kb) =
  {goToW(id,loc2,v),addK(pending(id,goToW(id,loc2,v)) @ s t,kb1)} 

if class(id,cl) clock(t) myHome(id,home) (atloc(id,loc) @ t0) 
   (targetVel(id,v) @ t1) (timeElapsed(dt) @ t2) kb0 := kb
 /\ pact := getPending(id,kb0)
 /\ kb1 := (if isGoTo(pact)
            then (if (close(getLoc(pact),loc) 
                       and not(recentVisitT(getLoc(pact),kb,dt)))
                  then incVisitTimes(id,getLoc(pact),t,kb)
                  else kb fi)
            else kb fi)
 /\ locs := (if isGoTo(pact) then getLoc(pact) else nil fi)
 /\ acts := solveSCP(id,kb1,myActsA(cl,id,locs,kb1)) 
***** /\ acts := solveSCP(id,kb1,myActs(cl,id,kb1)) 
 /\ goTo(id,loc2) := 
    (if acts == none then goTo(id,home) else pickOne(acts) fi) .


**** abstracting random numbers to [0,1]
  ops randMax rand.25 rand.5 rand.75 rand.125 : -> Nat .
  eq randMax = 4294967295 .
  eq rand.25 = 1073741824 .
  eq rand.5  = 2147483647 .
  eq rand.75 = 3221225471 .
  eq rand.125 = 536870911 .
  
***** set in SCENARIO  
  op stopSimulation : -> FiniteFloat .
  --- op windThresh : -> Nat .

op recentVisit : Loc KB FiniteFloat -> Bool .
eq recentVisit(loc,(lastVisit(id,loc,dt1) @ t) kb,dt2) = dt2 - dt1 < 3.0 .
eq recentVisit(loc,kb,dt2) = false [owise] .

op recentVisitT : Loc KB FiniteFloat -> Bool .
eq recentVisitT(loc,(visitTimes(id,loc, times ; t1) @ t) kb,dt2) 
        = dt2 - float(t1) < 3.0 .
eq recentVisitT(loc,kb,dt2) = false [owise] .


ops done notDone : Action Loc -> Bool .
eq done(act,loc) = not notDone(act,loc) .

eq notDone(takeOff(id,alt), pt(ix,iy,iz))  = abs(alt - iz) > 1 .
eq notDone(land(id), pt(ix,iy,iz))  = abs(iz) > 3 .
eq notDone(goTo(id,loc0), loc)  =  not close(loc0,loc) .
eq notDone(goToW(id,loc0,v), loc)  =  not close(loc0,loc) .
eq notDone(act,loc) = false [owise] .

eq close(pt(ix,iy,iz),pt(ix0,iy0,iz0)) 
  =  abs(ix0 - ix) + abs(iy0 - iy) < 8 .
eq close(loc0,loc) = false [owise] .


op isGoTo : ActSet -> Bool .
eq isGoTo(goTo(id,loc)) = true .
eq isGoTo(goToW(id,loc,v)) = true .
eq isGoTo(acts) = false [owise] .


op near : Loc Loc -> Bool .
eq near(pt(ix,iy,iz),pt(ix0,iy0,iz0)) 
  =  abs(ix0 - ix) + abs(iy0 - iy) < 16 .
eq near(l,l0) = false [owise] .


  op tell : Id Action KB -> KB .
  eq tell(id,act,(atloc(id,loc) @ t) class(id,cl) lkb) = 
           (atloc(id,loc) @ t) class(id,cl) .
  eq tell(id,act,kb) = none [owise] .

endfm

