mod ANALYSIS is
  inc SITL .

vars n n' t t0 m k n1 h : Nat .
vars i j x y z : Int .
vars sx sy sz dx dy dz v e c dt ff : FiniteFloat .
var dir : Dir .
vars wkb kb lkb ekb : KB .
var aconf : Conf .
var attrs : AttributeSet .
var id eid : Id .
var ids : IdSet .
var cl : Class .
var l home loc : Loc .
var a : Int .
var locs : LocList .

sort BoolRes .
**** bool indicates multi or single
**** res is string rep of answer 
op br : Bool String -> BoolRes .
op getObs : ASystem -> BoolRes .


  op getObsHome : Conf -> Nat .
  eq getObsHome([eid | ekb ] [ id : Bot | lkb : lkb, attrs] aconf) = 
  getObsHome$(lkb,ekb) + getObsHome([eid | ekb ] aconf) .
  eq getObsHome(aconf) = 0 [owise] .
  
  op getObsHome$ : KB KB -> Nat .
  eq getObsHome$(lkb (pending(id,stop(id)) @ t) myHome(id,home), 
              (atloc(id,loc) @ t0) ekb) = 
       (if (close(home,loc))
        then 1 else 0 fi) .
  eq getObsHome$(lkb,ekb) = 0 [owise] .

  op minEnergy : KB FiniteFloat -> FiniteFloat .
  eq minEnergy((energy(id,e) @ t) kb,ff) = 
   if e < ff then minEnergy(kb,e)
   else minEnergy(kb,ff) fi .
  eq minEnergy(kb,e) = e [owise] .

  op laps : Conf Nat -> Nat .
  op laps$ : KB Nat -> Nat .
  eq laps([ id : Bot | lkb : lkb, attrs] aconf, n1) 
   = laps(aconf,laps$(lkb,n1)) .
  eq laps(aconf,n1) = n1 [owise] .

  eq laps$((countVisit(id,loc,n) @ t) kb,n1) =
   if n1 > n then laps$(kb, n) else laps$(kb, n1) fi .
  eq laps$(kb,n1) = n1 [owise] .

  op visits : Conf -> Nat .
  op visits$ : KB -> Nat .
  eq visits([ id : Bot | lkb : lkb, attrs] aconf) 
   = visits$(lkb) + visits(aconf) .
  eq visits(aconf) = 0 [owise] .

  eq visits$((countVisit(id,loc,n) @ t) kb) = n + visits$(kb) .
  eq visits$(kb) = 0 [owise] .

  op lates : Conf -> Nat .
  eq lates([ id : Bot | lkb : ((countLate(id,n) @ t) kb), attrs] aconf) 
   = n + lates(aconf) .
  eq lates(aconf) = 0 [owise] .


  **** for nGenericApprox
  op getObsN : Conf -> String .
  ceq getObsN([eid | ekb ] aconf )
      =  mkdouble(float(h)) + " " + mkdouble(e)  + " " + mkdouble(float(m)) + " " + mkdouble(float(n)) + " " + mkdouble(float(k))
   if h := getObsHome([eid | ekb ] aconf)
   /\ e := minEnergy(ekb,100.0)
   /\ m := laps(aconf,1000) 
   /\ n := visits(aconf)
   /\ k := lates(aconf) .

  op countTotal : Id KB -> Nat .
  eq countTotal(id,(countVisit(id,loc,n) @ t) kb) 
   = n + countTotal(id,kb) .
  eq countTotal(id,kb) = 0 [owise] .

  --- eq getObsN( aconf ) = "(double 0) (double 0)" [owise] .  

  op mkdouble : FiniteFloat -> String .
  eq mkdouble(e) = 
    "(" + "double" + " " + makeString(decFloat(e,2)) + ")"  .

  op getObsKB : KB KB -> Bool .
  eq getObs({aconf}) = br(true,getObsN(aconf)) .

  ***(

  eq getObs({[ b(0) : Bot | lkb : lkb, attrs] [eid | ekb ] aconf }) =
     getObsKB(lkb,ekb)  .
  eq getObsKB(lkb (pending(b(0),stop(b(0))) @  t) myHome(b(0),home) , 
              ( atloc(b(0),loc) @ t0) ekb) = distance(home,loc) < 6 .
  eq getObs({ aconf }) = false [owise] .
  )
  op getObsVisited : ASystem -> Nat .
  op getObsEnergy : ASystem -> FiniteFloat .
  eq getObsVisited({[ b(0) : Bot | lkb : ((visited(b(0),locs) @ t0) lkb), attrs] [eid | ekb ] aconf }) 
   = len(locs).
  eq getObsEnergy({[ b(0) : Bot | lkb : lkb, attrs] [eid | ((energy(b(0),e) @ t) ekb) ] aconf }) = e .


endm