fth VALUATION is
  pr BOOL .
  inc SOFT-AGENTS .
	
  sort Grade . 
  op equivZero : Grade -> Bool .
  op _<_ : Grade  Grade -> Bool .
****  op _equiv_ : Grade x Grade -> Bool .	
 
  op val : Id KB Action  -> Grade .
***  op val : Id KB  -> Grade .

endfth


fmod SOLVE-SCP{Z :: VALUATION} is
   inc SOFT-AGENTS .

  vars v v0 v1 : Z$Grade .
	vars acts acts0 actset : ActSet .
	vars act1 act : Action .
  vars rks rks1 : RankSet{Z} .
	var id : Id .
	var kb : KB .
		
  sorts RankEle{Z} RankSet{Z} .
  op {_,_} : Z$Grade ActSet -> RankEle{Z} . 

  subsort RankEle{Z} < RankSet{Z} .
  op none : -> RankSet{Z} [ctor] .
  op __ : RankSet{Z} RankSet{Z} -> RankSet{Z} [ctor comm assoc id: none] .

  op getAct : RankSet{Z} -> ActSet .
  eq getAct({v,acts} rks) = acts getAct(rks) .
  eq getAct(none) = none .

  op updateRks : RankSet{Z} Action Z$Grade -> RankSet{Z} .
  ceq updateRks({v0,acts0} rks,act1,v1) = {v0,acts0} rks if v1 < v0 .
  ceq updateRks({v0,acts0} rks,act1,v1) = updateRks(rks,act1,v1) 
   if v0 < v1 .
  eq updateRks({v1,acts0} rks,act1,v1) = {v1,acts0 act1} rks .
  eq updateRks(rks,act1,v1) = 
	    if equivZero(v1) then rks else {v1,act1} rks fi .
    
****  op solveSCP : Id KB ActSet -> ActSet .
  eq solveSCP(id,kb,acts) = solveSCP$(id,kb,acts,none) .

  op solveSCP$ : Id KB ActSet RankSet{Z} -> ActSet .
  eq solveSCP$(id,kb,none,rks) = getAct(rks) .
  ceq solveSCP$(id,kb,act actset,rks) = solveSCP$(id,kb,actset,rks1) 
   if v0 := val(id,kb,act)
   /\ rks1 := updateRks(rks,act,v0) .

endfm


**** Boolean Valuation Safe or Not

fmod BVAL is
  pr CONVERSION .

**** Grade is BVal  
  vars b1 b2 : BVal .
  sort BVal .

  op _<_ : BVal BVal -> Bool  .
  op equivZero : BVal -> Bool .

  ops bot top : -> BVal .
  eq  bot < top = true .
  eq x:BVal < y:BVal = false [owise] .

  eq equivZero(bot) = true .
  eq equivZero(top) = false .	

endfm

fmod TRIVAL is
  pr CONVERSION .

**** Grade is BVal  
  vars b1 b2 : TriVal .
  sort TriVal .

  op _<_ : TriVal TriVal -> Bool  .
  op equivZero : TriVal -> Bool .

  ops bot mid top : -> TriVal .
  eq  bot < top = true .
  eq  bot < mid = true .
  eq  mid < top = true .
  eq x:TriVal < y:TriVal = false [owise] .

  eq equivZero(bot) = true .
  eq equivZero(top) = false .  
  eq equivZero(mid) = false .  

endfm

**** safety valuation function for energy concern
**** defines eval
fmod VAL-ENERGY is
  inc SOFT-AGENTS .
  inc CONVERSION .
  inc BVAL .
  inc MODEL-KNOWLEDGE .

  var cl : Class .
  vars kb kb' : KB .
  vars id st : Id .
  vars cx cy cz e : FiniteFloat .
  vars loc locb : Loc .
  vars t0 t t1 x1 y1 z1 x0 y0 z0 : Nat .
  var act : Action .
  vars loc0 loc1 loc2 : Loc .
  var locs : LocSet .
  vars ni ni0 ni1 : Float .
	vars dir dir1 : Dir .
  var dummy : BVal .
 
  op val-energy : Id KB  -> BVal .
  eq val-energy(id,(energy(id,e) @ t0) (atloc(id,loc) @ t) 
     (myHome(id,locb)) kb) = 
   if e > cost2loc(loc,locb,getVel(id,kb)) then top else bot fi .

  op val-energy : Id KB Action  -> BVal .
  eq val-energy(id,kb,goTo(id,loc1)) = 
  	      val-energy(id,doAct(id,kb,goTo(id,loc1)))  .
  eq val-energy(id,
	       (energy(id,e) @ t0) (atloc(id,loc0) @ t) 
         (myHome(id,locb)) kb, charge(id)) =
         (if (loc0 == locb) 
				  then (if (e >= maxCharge) then bot else top fi)
					else bot fi) .

  eq val-energy(id,kb,act) = bot [owise] .  **** shouldn't happen

endfm

fmod VAL-ENERGY-CONSERVATIVE is
  inc SOFT-AGENTS .
  inc CONVERSION .
  inc TRIVAL .
  inc MODEL-KNOWLEDGE .

  var cl : Class .
  vars kb kb' : KB .
  vars id st : Id .
  vars cx cy cz e : FiniteFloat .
  vars loc locb l0 lb : Loc .
  vars t0 t t1 x1 y1 z1 x0 y0 z0 : Nat .
  var act : Action .
  vars loc0 loc1 loc2 : Loc .
  var locs : LocSet .
  vars ni ni0 ni1 : Float .
  vars dir dir1 : Dir .
  var dummy : TriVal .
 

***  op caution : Id FiniteFloat -> Info .

  op towards : Loc Loc Loc -> Bool .
  eq towards(loc,loc1,locb) = 
               --- distance should reduce
               distance(locb,loc) > distance(loc1,locb) 
               --- and it should head home
               and angle(diff(loc,locb),diff(loc,loc1)) < pi / 4.0 .

  op val-energy : Id KB  -> TriVal .
  eq val-energy(id,(energy(id,e) @ t0) (atloc(id,loc) @ t) 
     (myHome(id,locb)) kb) = 
   if e > cost2loc(loc,locb,getVel(id,kb)) + getCaution(id,kb) then top else 
    (if e > cost2loc(loc,locb,getVel(id,kb)) then mid else bot fi) fi .

  op val-energy : Id KB Action  -> TriVal .
  ceq val-energy(id,kb,goTo(id,loc1)) = 
          val-energy(id,doAct(id,kb,goTo(id,loc1)))  
  if not (val-energy(id,doAct(id,kb,goTo(id,loc1))) == mid) .

  ceq val-energy(id,kb,goTo(id,loc1)) = if towards(loc,loc1,locb) then 
                                     mid else bot fi
   if val-energy(id,doAct(id,kb,goTo(id,loc1))) == mid  
   /\ (atloc(id,loc) @ t) (myHome(id,locb)) kb' := kb .

  eq val-energy(id,
         (energy(id,e) @ t0) (atloc(id,loc0) @ t) 
         (myHome(id,locb)) kb, charge(id)) =
         (if (loc0 == locb) 
          then (if (e >= maxCharge) then bot else top fi)
          else bot fi) .

  eq val-energy(id,kb,act) = bot [owise] .  **** shouldn't happen

endfm

fmod UVAL is
  pr CONVERSION .

***** Grade is Float
  vars u1 u2 : Float .
  

  op equivZero : Float -> Bool .
  eq equivZero(0.0) = true .
  eq equivZero(u1) = false [owise] .

 
***(
  op _equiv_ : Float Float -> Bool [comm] .
  eq u1 equiv u2 = (u1 == u2) . 
  eq u1 <= u2 = (u1 < u2) or (u1 equiv u2) . 
)

endfm

fmod FFVAL is
  pr CONVERSION .

  sort FF .
  op {_,_} : FiniteFloat FiniteFloat -> FF .

***** Grade is Float
  vars u1 u2 : FF .
  vars fb fc fb0 fc0 : FiniteFloat .

  op _<_ : FF FF -> Bool  .
  eq {fb,fc} < {fb0,fc0} 
   = (if (fb < fb0) or ((fb == fb0) and (fc > fc0))
     then true
     else (if (fb == fb0 and (fc < fc0))
           then false
           else (if (fb / fc ) < (fb0 / fc0 )
                 then true else false fi)
     fi) fi) .

  op equivZero : FF -> Bool .
  --- Anything with benefit zero is zero.
  eq equivZero({0.0,fc}) = true . 
  eq equivZero(u1) = false [owise] .

***(
  op _equiv_ : Float Float -> Bool [comm] .
  eq u1 equiv u2 = (u1 == u2) . 
  eq u1 <= u2 = (u1 < u2) or (u1 equiv u2) . 
)

endfm

fmod VAL-PICS is
  inc SOFT-AGENTS .
  inc CONVERSION .
  inc FFVAL .
  inc MODEL-KNOWLEDGE .

  vars kb kb' kb1 kb2 : KB .
  vars id st : Id .
  vars x y x1 y1 z1 x0 y0 z0 : Nat .
  var act : Action .
  vars loc loc0 loc1 loc2 : Loc .
  vars dir dir1 : Dir .
  vars t t0 t1 : Time .
  vars st1 st2 v : FiniteFloat .

  op valueCS : Id KB -> FiniteFloat .
  op benefit : Id KB Action -> FiniteFloat .
  op cost : Id KB Action -> FiniteFloat .
  op val-pics : Id KB Action  -> FF .

  ceq benefit(id,kb,goTo(id,loc)) = st2 - st1
   if kb1 := doAct(id,kb,goTo(id,loc))
   /\ t := getTime(kb1)
   /\ kb2 := addK(kb1,lastVisit(id,loc) @ t)
   /\ st1 := valueCS(id,kb)
   /\ st2 := valueCS(id,kb1) .

  ceq cost(id,kb,goTo(id,loc)) = cost2loc(loc0,loc,v) 
   if v := getVel(id,kb) 
   /\ loc0 := getLoc(id,kb) .

  eq valueCS(id,(clock(t)) (lastVisit(id,loc) @ t1) kb)
   = if t - t1 > periodicity 
     then valueCS(id,(clock(t)) kb)
     else timeFactor(t1,t) +
          valueCS(id,(clock(t)) kb) fi .
---           photo time, current time
  op timeFactor : Nat Nat -> FiniteFloat . 
  eq timeFactor(t1,t) = if 2 * (t - t1) > periodicity
                        then 0.1 * float((t - t1) / periodicity) else 1.0 fi .

  eq val-pics(id,kb,act) 
   = {benefit(id,kb,act),cost(id,kb,act)} .

endfm

--- Agent decides by considering how stale and how far the points are.
--- I am not considering resolution this time.


fmod VAL-PATROL is
  inc SOFT-AGENTS .
  inc CONVERSION .
  inc UVAL .
  inc MODEL-KNOWLEDGE .


  vars kb kb' : KB .
  vars id st : Id .
  vars x y x1 y1 z1 x0 y0 z0 : Nat .
  var act : Action .
  vars loc0 loc1 loc2 : Loc .
  vars dir dir1 : Dir .
  vars t t0 t1 : Time .
 
****  op val-patrol : Id KB  -> Float .

  op val-patrol : Id KB Action -> Float .

***(
  eq val-patrol(id, 
	    (atloc(id,pt(x,y)) @ t) class(id,Bot)
	    (myDir(id,dir) @ t0) (myY(id,y0) @ t1) kb,
      mv(id,dir1)) = 
      (if (y0 < y) 
			 then (if  (dir1 == S) then 0.9 else 0.0 fi)
			 else  (if (y < y0) 
       			 then (if  (dir1 == N) then 0.9 else 0.0 fi)
             else (if  (dir == dir1) then 0.9 else 0.0 fi)
       			fi)			
   			fi)	.
)
  eq val-patrol(id, kb, charge(id))  = 1.0 .
	
endfm

fmod VAL-PATROL-ONLY is
  inc VAL-PATROL .

  var id : Id . var kb : KB . var act : Action .
	
  op val : Id KB Action -> Float .
	eq val(id,kb,act) = val-patrol(id,kb,act) .
	
endfm

fmod VAL-PATROL-ENERGY is
  inc VAL-ENERGY .
  inc VAL-PATROL .

  var id : Id . 
  var kb : KB . 
  var act : Action .
  vars b1 b2 : BVal .
  vars u1 u2 : Float .
  
  sort BUVal .
  op {_,_} : BVal Float -> BUVal .

  op val : Id KB -> BUVal .
  op val : Id KB Action -> BUVal .
  eq val(id,kb) = {val-energy(id,kb),1.0} .
  eq val(id,kb,act) = {val-energy(id,kb,act),val-patrol(id,kb,act)} .

  op _<_ : BUVal BUVal -> Bool .
  op equivZero : BUVal -> Bool .

  eq {b1,u1} < {b2,u2} = (b1 < b2) or (b1 == b2 and u1 < u2) .
  eq equivZero({b1,u1}) = (equivZero(b1)) .
  
endfm

fmod VAL-PATROL-ENERGY-CONSERVATIVE is
  inc VAL-ENERGY-CONSERVATIVE .
  inc VAL-PATROL .

  var id : Id . 
  var kb : KB . 
  var act : Action .
  vars b1 b2 : TriVal .
  vars u1 u2 : Float .
  
  sort BUVal .
  op {_,_} : TriVal Float -> BUVal .

  op val : Id KB -> BUVal .
  op val : Id KB Action -> BUVal .
  eq val(id,kb) = {val-energy(id,kb),1.0} .
  eq val(id,kb,act) = {val-energy(id,kb,act),val-patrol(id,kb,act)} .

  op _<_ : BUVal BUVal -> Bool .
  op equivZero : BUVal -> Bool .

  eq {b1,u1} < {b2,u2} = (b1 < b2) or (b1 == b2 and u1 < u2) .
  eq equivZero({b1,u1}) = (equivZero(b1)) .
  
endfm

view  valuation2valpatrolonly from VALUATION to VAL-PATROL-ONLY is
  sort Grade to Float .
endv	

view  valuation2valpatrolenergy from VALUATION to VAL-PATROL-ENERGY is
  sort Grade to BUVal .
endv  

view  valuation2valpatrolenergyconservative from VALUATION to VAL-PATROL-ENERGY-CONSERVATIVE is
  sort Grade to BUVal .
endv  




***(
view  valuation2valenergy from VALUATION to VAL-ENERGY is
  sort Grade to BVal .
endv  

view  valuation2valpatrol from VALUATION to VAL-PATROL-DET is
  sort Grade to Float .
endv	

view  valuationbvalxuval from VALUATION to BVALxUVAL is
  sort Grade to BValxFloat .
 endv  
)
***(


**** goal achievement valuation

fmod PATROLLING is
  inc UNITVAL .
  inc SOFT-AGENTS .
  inc CONVERSION .
  inc KNOWLEDGE .
 
  var cl : Class .
  vars kb kb' kbnu : KB .
  vars id idp : Id .
  var act : Action .
  var acts acts0 : ActSet .
  var t1 t : Time .
  var res ff ff1 ff2 u ben cst cst1 u1 : FiniteFloat .
  var dir : Dir .
  var tnu : Time . 
  vars locs locs1 : LocSet .
  vars loc loc0 loc1 : Loc .
  
  op valu : Id KB -> FiniteFloat .
  op valu : Id KB Action -> FiniteFloat .
  op solvePatrol : Id KB ActSet RankSet -> ActSet .

endfm
)
