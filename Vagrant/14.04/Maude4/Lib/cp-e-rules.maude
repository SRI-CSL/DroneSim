mod SOFT-AGENT-RULES is
  inc CPE-CONFIG .

var t : Time .
var nzt : NzTime .
var conf : Conf .
vars a a1 a2 id id1 id2 eid : Id .
vars cl cl1 cl2 : Class .
var ids : IdSet .
var ki : KItem .
vars kb kb1 lkb lkb1 lkb2 ckb ckb' ckb1 ckb2 ekb ekb' ekb1 ekb2 : KB .
var kekset : KBEventsKBSet .
vars ckb1' ckb2' rcvk rcvk1 rcvk2 lkb' : KB .
vars evs evs' evs1 evs2 ievs devs : EventSet .
var ev : Event .
var b : Bool .
var info : Info .
var act : Action . 
var iset : InfoSet .
vars aconf aconf0 aconf1 aconf2 : Conf .
var task  : Task .
vars ats ats1 ats2 : AttributeSet . 

**** 16feb26 turn knowledge sharing into an equation
**** for concurrent application during timeStep
***(
*** CP E rule --  project the global ekb to local to test contact
crl[KnowledgeSharing]:
[id1 : cl1 | ckb : ckb1, evs : evs1, ats1]
[id2 : cl2 | ckb : ckb2, evs : evs2, ats2]
[eid | ekb]
=>      
[id1 : cl1 | ckb : ckb1', evs : (evs1 (if rcvk1 == none then none else rcv(rcvk1) fi)), ats1] 
[id2 : cl2 | ckb : ckb2', evs : (evs2 (if rcvk2 == none then none else rcv(rcvk2) fi)), ats2]
[eid | ekb]
if 
 inContact(id1,id2,ekb) 
/\ {ckb1', rcvk1} := share(ckb2,ckb1,none)   --- from ckb2 to ckb1
/\ {ckb2', rcvk2} := share(ckb1,ckb2,none)   --- from ckb1 to ckb2
/\ rcvk2 rcvk1 =/= none 
[print "Share: " id1 " " id2 " : " rcvk2 rcvk1] 
.
)

op shareKnowledge : Conf -> Conf .
op shareKnowledge1 : Agent Conf Conf -> Conf .

eq shareKnowledge([id1 : cl1 | ckb : ckb1, evs : evs1, ats1] aconf) =
    shareKnowledge1([id1 : cl1 | ckb : ckb1, evs : evs1, ats1], aconf,none) .

**** no more ids to share
eq shareKnowledge(aconf) = aconf [owise] .

ceq shareKnowledge1([id1 : cl1 | ckb : ckb1, evs : evs1, ats1], 
                   [id2 : cl2 | ckb : ckb2, evs : evs2, ats2] [eid | ekb] aconf,
		     					 aconf0)  
    = shareKnowledge1([id1 : cl1 | ckb : ckb1', evs : addRcv(evs1,rcvk1), ats1], 
                      [eid | ekb] aconf,
						        aconf0 [id2 : cl2 | ckb : ckb2', evs : addRcv(evs2, rcvk2), ats2])
  if  inContact(id1,id2,ekb) 
  /\ {ckb1', rcvk1} := share(ckb2,ckb1,none)   --- from ckb2 to ckb1
  /\ {ckb2', rcvk2} := share(ckb1,ckb2,none)   --- from ckb1 to ckb2
.

**** no more sharing for id1
eq shareKnowledge1([id1 : cl1 | ckb : ckb1, evs : evs1, ats1], aconf, aconf0) 
  = shareKnowledge(aconf0 aconf) [id1 : cl1 | ckb : ckb1, evs : evs1, ats1] [owise] .


**** assuming 0 or 1 rcv(kb) in evs, this collects all shared knowledge in one lump
op addRcv : EventSet KB -> EventSet .
eq addRcv(rcv(rcvk1) evs1, rcvk2) =  rcv(addK(rcvk1,rcvk2)) evs1 .
eq addRcv(evs1, rcvk2) =  rcv(rcvk2) evs1 [owise] .

**** Agents have class specific knowledge handling rules
**** The agent can update its local kb.  
*** op handle : Class Id KB KB -> KBEvents .
*** This is folded into doTask
****  posting assumes the agent has acted on the info 
**** timestamped version goes into the lkb
**** NOTE: clock info should be in lkb. 

*** Agents have class specific procedures for executing scheduled tasks
***                                    ekb lkb
**** op doTask : Class Id Task EventSet KB KB -> KBEvents .
crl[doTask]:
[id : cl | lkb : lkb,  evs : ((task @ 0) evs),  ckb : ckb, ats]  [eid | ekb ]
=>
[id : cl | lkb : lkb', evs : evs',  ckb : ckb', ats] [eid | ekb ]
if t := getTime(lkb)
/\ {ievs,devs} := splitEvents(evs,none)
/\ {lkb', evs', kb} kekset := doTask(cl, id, task,ievs, devs, ekb, lkb) 
/\ ckb' := addK(ckb,kb)
 --- [print "doTask: " id " ! " task  " time: " t " !! " evs' " \n " kekset ]
 [print "doTask: " id  "! time: " t " !! " evs'] 
.

**** timeStep rule simultaneously performs actions using doEnvAct.
**** It updates delays and durations in the event sets (timeEffect),
**** and envs and new events (updateAConf)

op toPrintKB : KB -> KB .
eq toPrintKB(kb) = kb [owise] .

crl[timeStep]:
{ aconf } 
=> 
{ aconf2 }
if nzt := mte(aconf)
/\ t := getTime(envKB(aconf))
/\ ekb' := doEnvAct(t, nzt, envKB(aconf), effActs(aconf)) 
/\ aconf0 := updateEnv(ekb',timeEffect(aconf,nzt))
/\ aconf1 := shareKnowledge(aconf0)
/\ aconf2 := updateConf(aconf1) 
/\ ekb1 := toPrintKB(ekb')
[print "eAct: " ekb1 "\ntimeStep: " t " ++ " nzt] 
.
endm 



mod CPE-RULES-TEST is
  inc SOFT-AGENT-RULES .
***  inc SOFT-AGENTS-TEST .

ops dId pId xId : -> Id .
ops dCl pCl xCl : -> Class .
ops loc0 loc1 loc2 : -> Loc .

op iS0 : -> InfoSet .
eq iS0 = atloc(dId,loc0) atloc(pId,loc1) .

ops lKB0 lKB1 : -> KB .
eq lKB0 = tstamp(iS0,1) .
eq lKB1 = tstamp(iS0,3) .

ops evS0 evS1 : -> EventSet .
eq evS0 = (tick @ 1) .
eq evS1 = (tick @ 0) rcv(atloc(xId,loc2) @ 1) .

ops ag0 ag1 ag00 ag10 : Time -> Agent .
eq ag0(t) = [dId : dCl | lkb : (clock(t) lKB0), ckb : lKB0, evs : evS0 ] .
eq ag1(t) = [pId : pCl | lkb : (clock(t) lKB0), ckb : lKB0, evs : evS1 ] .

eq ag00(t) = [dId : dCl | lkb : (clock(t) atloc(dId,loc0) @ 1), ckb : (atloc(dId,loc0) @ 1), evs : (tick @ 2)] .
eq ag10(t) = [pId : pCl | lkb : (clock(t) atloc(pId,loc1) @ 1), ckb : (atloc(pId,loc1) @ 1), evs : (tick @ 1)] .


op eId : -> Id .
ops env2 env4 : -> Env .
eq env2 = [eId | clock(2) lKB0] .
eq env4 = [eId | clock(4) lKB1] .

var t : Time .
var nzt : Time .
vars id id0 id1 : Id .
vars cl : Class .
vars kb kb0 kb1 lkb ekb : KB .
vars t0 t1 : Nat .
vars l0 l1 loc : Loc .
vars evs ievs devs : EventSet .


eq atloc(id,l0) @ t0 << atloc(id,l1) @ t1 = t0 < t1 .

ceq doTask(cl, id, tick, ievs, devs, ekb, lkb) =
    {addK(lkb, atloc(id,loc) @ t), devs (tick @ 1), atloc(id,loc) @ t} 
if t := getTime(lkb)
/\ loc := getLoc(id,ekb) .

eq distance(loc0, loc1) = 1 .
eq inContact(id0,id1,kb) = distance(getLoc(id0,kb),getLoc(id1,kb)) <= 2 .

ops ic0 ic1 : Time -> Conf .
eq ic0(t) = ag0(t) ag1(t) .
eq ic1(t) = ag00(t) ag10(t) .

eq doEnvAct(t, nzt,ekb,none) = none .
 
endm

eof

red doEnvAct(2, 1, clock(2) (atloc(dId, loc0) @ 1) atloc(pId, loc1) @ 1, none) .

set print attribute on .
rew [10] {ic0(1) env2 } .

rew [10] {ic1(4) env4} .

red getTime(clock(2) lKB0) .
red getLoc(dId,clock(2) lKB0) .
red doTask(dCl,dId,tick,none,none, clock(1) lKB0,  clock(2) lKB0) .		
		
timeEffect(rcv(atloc(xId, loc2)  @ 1), 1)